{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part I -- Build Expert Variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('NY property data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RECORD</th>\n",
       "      <th>BBLE</th>\n",
       "      <th>B</th>\n",
       "      <th>BLOCK</th>\n",
       "      <th>LOT</th>\n",
       "      <th>EASEMENT</th>\n",
       "      <th>OWNER</th>\n",
       "      <th>BLDGCL</th>\n",
       "      <th>TAXCLASS</th>\n",
       "      <th>LTFRONT</th>\n",
       "      <th>...</th>\n",
       "      <th>BLDFRONT</th>\n",
       "      <th>BLDDEPTH</th>\n",
       "      <th>AVLAND2</th>\n",
       "      <th>AVTOT2</th>\n",
       "      <th>EXLAND2</th>\n",
       "      <th>EXTOT2</th>\n",
       "      <th>EXCD2</th>\n",
       "      <th>PERIOD</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>VALTYPE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1000010101</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>101</td>\n",
       "      <td>NaN</td>\n",
       "      <td>U S GOVT LAND &amp; BLDGS</td>\n",
       "      <td>P7</td>\n",
       "      <td>4</td>\n",
       "      <td>500</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3775500.0</td>\n",
       "      <td>8613000.0</td>\n",
       "      <td>3775500.0</td>\n",
       "      <td>8613000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FINAL</td>\n",
       "      <td>2010/11</td>\n",
       "      <td>AC-TR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1000010201</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>201</td>\n",
       "      <td>NaN</td>\n",
       "      <td>U S GOVT LAND &amp; BLDGS</td>\n",
       "      <td>Z9</td>\n",
       "      <td>4</td>\n",
       "      <td>27</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11111400.0</td>\n",
       "      <td>80690400.0</td>\n",
       "      <td>11111400.0</td>\n",
       "      <td>80690400.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FINAL</td>\n",
       "      <td>2010/11</td>\n",
       "      <td>AC-TR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1000020001</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DEPT OF GENERAL SERVI</td>\n",
       "      <td>Y7</td>\n",
       "      <td>4</td>\n",
       "      <td>709</td>\n",
       "      <td>...</td>\n",
       "      <td>709</td>\n",
       "      <td>564</td>\n",
       "      <td>32321790.0</td>\n",
       "      <td>40179510.0</td>\n",
       "      <td>32321790.0</td>\n",
       "      <td>40179510.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FINAL</td>\n",
       "      <td>2010/11</td>\n",
       "      <td>AC-TR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1000020023</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DEPARTMENT OF BUSINES</td>\n",
       "      <td>T2</td>\n",
       "      <td>4</td>\n",
       "      <td>793</td>\n",
       "      <td>...</td>\n",
       "      <td>85</td>\n",
       "      <td>551</td>\n",
       "      <td>13644000.0</td>\n",
       "      <td>15750000.0</td>\n",
       "      <td>13644000.0</td>\n",
       "      <td>15750000.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FINAL</td>\n",
       "      <td>2010/11</td>\n",
       "      <td>AC-TR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>1000030001</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PARKS AND RECREATION</td>\n",
       "      <td>Q1</td>\n",
       "      <td>4</td>\n",
       "      <td>323</td>\n",
       "      <td>...</td>\n",
       "      <td>89</td>\n",
       "      <td>57</td>\n",
       "      <td>106348680.0</td>\n",
       "      <td>107758350.0</td>\n",
       "      <td>106348680.0</td>\n",
       "      <td>107758350.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FINAL</td>\n",
       "      <td>2010/11</td>\n",
       "      <td>AC-TR</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   RECORD        BBLE  B  BLOCK  LOT EASEMENT                  OWNER BLDGCL  \\\n",
       "0       1  1000010101  1      1  101      NaN  U S GOVT LAND & BLDGS     P7   \n",
       "1       2  1000010201  1      1  201      NaN  U S GOVT LAND & BLDGS     Z9   \n",
       "2       3  1000020001  1      2    1      NaN  DEPT OF GENERAL SERVI     Y7   \n",
       "3       4  1000020023  1      2   23      NaN  DEPARTMENT OF BUSINES     T2   \n",
       "4       5  1000030001  1      3    1      NaN   PARKS AND RECREATION     Q1   \n",
       "\n",
       "  TAXCLASS  LTFRONT  ...  BLDFRONT BLDDEPTH      AVLAND2       AVTOT2  \\\n",
       "0        4      500  ...         0        0    3775500.0    8613000.0   \n",
       "1        4       27  ...         0        0   11111400.0   80690400.0   \n",
       "2        4      709  ...       709      564   32321790.0   40179510.0   \n",
       "3        4      793  ...        85      551   13644000.0   15750000.0   \n",
       "4        4      323  ...        89       57  106348680.0  107758350.0   \n",
       "\n",
       "       EXLAND2       EXTOT2  EXCD2  PERIOD     YEAR VALTYPE  \n",
       "0    3775500.0    8613000.0    NaN   FINAL  2010/11   AC-TR  \n",
       "1   11111400.0   80690400.0    NaN   FINAL  2010/11   AC-TR  \n",
       "2   32321790.0   40179510.0    NaN   FINAL  2010/11   AC-TR  \n",
       "3   13644000.0   15750000.0    NaN   FINAL  2010/11   AC-TR  \n",
       "4  106348680.0  107758350.0    NaN   FINAL  2010/11   AC-TR  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Filling in missing zips**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "29890"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_zips = np.where(pd.isnull(df['ZIP']))[0]\n",
    "len(missing_zips)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(len(missing_zips)):\n",
    "    if (df.loc[missing_zips[i]+1,'ZIP'] == df.loc[missing_zips[i]-1,'ZIP']):\n",
    "        df.loc[missing_zips[i],'ZIP'] = df.loc[missing_zips[i]-1,'ZIP']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16437"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_zips = np.where(pd.isnull(df['ZIP']))[0]\n",
    "len(missing_zips)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(len(missing_zips)):\n",
    "    df.loc[missing_zips[i],'ZIP'] = df.loc[missing_zips[i]-1,'ZIP']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_zips = np.where(pd.isnull(df['ZIP']))[0]\n",
    "len(missing_zips)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Filling in missing stories**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "56264"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp = df[df['STORIES'].isnull()]\n",
    "len(temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1B    24736\n",
       "4     22354\n",
       "3      4635\n",
       "2      3435\n",
       "1       897\n",
       "2C      138\n",
       "2B       34\n",
       "2A       30\n",
       "1A        5\n",
       "Name: TAXCLASS, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp['TAXCLASS'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TAXCLASS\n",
       "1      2.111641\n",
       "1A     1.656837\n",
       "1B     4.000000\n",
       "1C     3.052748\n",
       "1D     1.068966\n",
       "2     16.095110\n",
       "2A     2.844574\n",
       "2B     4.004494\n",
       "2C     4.745097\n",
       "3      1.333333\n",
       "4      5.446968\n",
       "Name: STORIES, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_stories = df.groupby('TAXCLASS')['STORIES'].mean()\n",
    "mean_stories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df[df['STORIES']==0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['STORIES'] = df['STORIES'].fillna(value = 0)\n",
    "for i in mean_stories.index:\n",
    "    df.loc[(df['STORIES']==0) & (df['TAXCLASS']==i), 'STORIES'] = mean_stories[i]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Filling missing in FULLVAL, AVLAND, AVTOT**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TAXCLASS\n",
       "1     5.698435e+05\n",
       "1A    3.352842e+05\n",
       "1B    5.613639e+05\n",
       "1C    7.615359e+05\n",
       "1D    2.233614e+07\n",
       "2     7.998018e+05\n",
       "2A    8.640037e+05\n",
       "2B    1.252989e+06\n",
       "2C    7.728799e+05\n",
       "3     1.112765e+05\n",
       "4     3.211928e+06\n",
       "Name: FULLVAL, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['FULLVAL'].replace('NaN',0)\n",
    "temp = df[df['FULLVAL']!=0]\n",
    "mean_fullval = temp.groupby('TAXCLASS')['FULLVAL'].mean()\n",
    "mean_fullval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TAXCLASS\n",
       "1      14896.433976\n",
       "1A      2247.369138\n",
       "1B     14781.268478\n",
       "1C      8225.658898\n",
       "1D    709303.793103\n",
       "2      90830.095031\n",
       "2A     31363.390619\n",
       "2B     54446.810503\n",
       "2C     25639.066531\n",
       "3      43368.352941\n",
       "4     600949.433397\n",
       "Name: AVLAND, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['AVLAND'].replace('NaN',0)\n",
    "temp_avland = df[df['AVLAND']!=0]\n",
    "mean_avland = temp_avland.groupby('TAXCLASS')['AVLAND'].mean()\n",
    "mean_avland"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TAXCLASS\n",
       "1     2.501609e+04\n",
       "1A    1.436972e+04\n",
       "1B    1.478410e+04\n",
       "1C    2.898447e+04\n",
       "1D    1.166866e+06\n",
       "2     3.599121e+05\n",
       "2A    7.961158e+04\n",
       "2B    1.785982e+05\n",
       "2C    1.170444e+05\n",
       "3     5.007444e+04\n",
       "4     1.488705e+06\n",
       "Name: AVTOT, dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['AVTOT'].replace('NaN',0)\n",
    "temp_avtot = df[df['AVTOT']!=0]\n",
    "mean_avtot = temp_avtot.groupby('TAXCLASS')['AVTOT'].mean()\n",
    "mean_avtot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 2 Âµs, sys: 1e+03 ns, total: 3 Âµs\n",
      "Wall time: 6.2 Âµs\n"
     ]
    }
   ],
   "source": [
    "# substituting decent values for AVTOT, AVLAND, FULLVAL from averages by TAXCLASS\n",
    "%time\n",
    "\n",
    "for index in mean_fullval.index:\n",
    "    df.loc[(df['FULLVAL']==0) & (df['TAXCLASS']==index), 'FULLVAL'] = mean_fullval[index]\n",
    "    df.loc[(df['AVLAND']==0) & (df['TAXCLASS']==index), 'AVLAND'] = mean_avland[index]\n",
    "    df.loc[(df['AVTOT']==0) & (df['TAXCLASS']==index), 'AVTOT'] = mean_avtot[index]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Filling in missing Lot and Buiding Size**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# as these 4 values do not have NAs, we just need to replace 0s. \n",
    "# calculate groupwise average. 1st replace 0 by NAs so they are not counted in calculating mean.\n",
    "df.loc[df['LTFRONT']==0,'LTFRONT']=np.nan\n",
    "df.loc[df['LTDEPTH']==0,'LTDEPTH']=np.nan\n",
    "df.loc[df['BLDFRONT']==0,'BLDFRONT']=np.nan\n",
    "df.loc[df['BLDDEPTH']==0,'BLDDEPTH']=np.nan\n",
    "df.loc[df['LTFRONT']==1,'LTFRONT']=np.nan\n",
    "df.loc[df['LTDEPTH']==1,'LTDEPTH']=np.nan\n",
    "df.loc[df['BLDFRONT']==1,'BLDFRONT']=np.nan\n",
    "df.loc[df['BLDDEPTH']==1,'BLDDEPTH']=np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate mean now (mean function ignores NAs but not 0s hence we converted 0 to NA)\n",
    "mean_LTFRONT=df.groupby(df['TAXCLASS'])['LTFRONT'].mean()\n",
    "mean_LTDEPTH=df.groupby(df['TAXCLASS'])['LTDEPTH'].mean()\n",
    "mean_BLDFRONT=df.groupby(df['TAXCLASS'])['BLDFRONT'].mean()\n",
    "mean_BLDDEPTH=df.groupby(df['TAXCLASS'])['BLDDEPTH'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# impute values\n",
    "for index in mean_LTFRONT.index:\n",
    "    df.loc[(df['LTFRONT'].isnull())&(df['TAXCLASS']==index),'LTFRONT']=mean_LTFRONT[index]    \n",
    "    df.loc[(df['LTDEPTH'].isnull())&(df['TAXCLASS']==index),'LTDEPTH']=mean_LTDEPTH[index]\n",
    "    df.loc[(df['BLDFRONT'].isnull())&(df['TAXCLASS']==index),'BLDFRONT']=mean_BLDFRONT[index]\n",
    "    df.loc[(df['BLDDEPTH'].isnull())&(df['TAXCLASS']==index),'BLDDEPTH']=mean_BLDDEPTH[index]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Calculate these 45 variables**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# one 5-digit ZIP, one 3-digit ZIP\n",
    "df['ZIP'] = df['ZIP'].astype(str)\n",
    "df['ZIP3'] = df['ZIP'].str[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['ltsize'] = df['LTFRONT']*df['LTDEPTH']\n",
    "df['bldsize'] = df['BLDFRONT']*df['BLDDEPTH']\n",
    "df['bldvol'] = df['bldsize']*df['STORIES']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['r1'] = df['FULLVAL']/df['ltsize']\n",
    "df['r2'] = df['FULLVAL']/df['bldsize']\n",
    "df['r3'] = df['FULLVAL']/df['bldvol']\n",
    "df['r4'] = df['AVLAND']/df['ltsize']\n",
    "df['r5'] = df['AVLAND']/df['bldsize']\n",
    "df['r6'] = df['AVLAND']/df['bldvol']\n",
    "df['r7'] = df['AVTOT']/df['ltsize']\n",
    "df['r8'] = df['AVTOT']/df['bldsize']\n",
    "df['r9'] = df['AVTOT']/df['bldvol']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "ninevars = ['r1','r2','r3','r4','r5','r6','r7','r8','r9']\n",
    "zip5_mean = df.groupby('ZIP')[ninevars].mean()\n",
    "zip3_mean = df.groupby('ZIP3')[ninevars].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "taxclass_mean = df.groupby('TAXCLASS')[ninevars].mean()\n",
    "borough_mean = df.groupby('B')[ninevars].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.join(zip5_mean, on = 'ZIP', rsuffix = '_zip5')\n",
    "df = df.join(zip3_mean, on = 'ZIP3', rsuffix = '_zip3')\n",
    "df = df.join(taxclass_mean, on = 'TAXCLASS', rsuffix = '_taxclass')\n",
    "df = df.join(borough_mean, on = 'B', rsuffix = '_boro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "rsuffix = ['_zip5','_zip3','_taxclass','_boro']\n",
    "\n",
    "for i in ninevars:\n",
    "    for j in rsuffix:\n",
    "        df[i+j] = df[i]/df[i+j]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "variables = df.iloc[:,-45:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>r1</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>211.587048</td>\n",
       "      <td>667.298827</td>\n",
       "      <td>3.180786e-04</td>\n",
       "      <td>70.924572</td>\n",
       "      <td>150.384615</td>\n",
       "      <td>241.000000</td>\n",
       "      <td>3.423792e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r2</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>542.508933</td>\n",
       "      <td>2328.098157</td>\n",
       "      <td>7.068200e-04</td>\n",
       "      <td>170.538697</td>\n",
       "      <td>493.333333</td>\n",
       "      <td>680.341880</td>\n",
       "      <td>1.097094e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r3</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>249.084360</td>\n",
       "      <td>1491.143666</td>\n",
       "      <td>8.607173e-05</td>\n",
       "      <td>68.800879</td>\n",
       "      <td>234.895833</td>\n",
       "      <td>333.064516</td>\n",
       "      <td>1.097094e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r4</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>11.034654</td>\n",
       "      <td>178.761499</td>\n",
       "      <td>8.333333e-06</td>\n",
       "      <td>2.230459</td>\n",
       "      <td>4.556098</td>\n",
       "      <td>7.222129</td>\n",
       "      <td>1.540706e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r5</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>28.673038</td>\n",
       "      <td>979.313585</td>\n",
       "      <td>2.008340e-04</td>\n",
       "      <td>5.606622</td>\n",
       "      <td>14.878788</td>\n",
       "      <td>20.293030</td>\n",
       "      <td>4.914844e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r6</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>13.976310</td>\n",
       "      <td>643.995038</td>\n",
       "      <td>1.038033e-05</td>\n",
       "      <td>1.736443</td>\n",
       "      <td>7.083124</td>\n",
       "      <td>10.033206</td>\n",
       "      <td>4.914844e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r7</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>27.211257</td>\n",
       "      <td>268.821110</td>\n",
       "      <td>8.333333e-06</td>\n",
       "      <td>5.128400</td>\n",
       "      <td>8.485584</td>\n",
       "      <td>13.492500</td>\n",
       "      <td>1.540706e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r8</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>56.466939</td>\n",
       "      <td>1285.734106</td>\n",
       "      <td>3.062474e-04</td>\n",
       "      <td>16.717333</td>\n",
       "      <td>26.814732</td>\n",
       "      <td>36.015873</td>\n",
       "      <td>8.249136e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r9</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>23.062487</td>\n",
       "      <td>705.017745</td>\n",
       "      <td>6.049251e-05</td>\n",
       "      <td>6.570424</td>\n",
       "      <td>12.588911</td>\n",
       "      <td>17.567593</td>\n",
       "      <td>4.936922e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r1_zip5</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.845260</td>\n",
       "      <td>1.866140e-06</td>\n",
       "      <td>0.422482</td>\n",
       "      <td>0.904280</td>\n",
       "      <td>1.224272</td>\n",
       "      <td>1.448251e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r2_zip5</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.241998</td>\n",
       "      <td>1.238228e-06</td>\n",
       "      <td>0.362310</td>\n",
       "      <td>0.935539</td>\n",
       "      <td>1.240450</td>\n",
       "      <td>2.312079e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r3_zip5</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.370306</td>\n",
       "      <td>3.619745e-07</td>\n",
       "      <td>0.324294</td>\n",
       "      <td>0.899052</td>\n",
       "      <td>1.212725</td>\n",
       "      <td>4.446210e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r4_zip5</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>10.881349</td>\n",
       "      <td>1.541970e-06</td>\n",
       "      <td>0.229912</td>\n",
       "      <td>0.702635</td>\n",
       "      <td>1.043997</td>\n",
       "      <td>7.922573e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r5_zip5</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.570998</td>\n",
       "      <td>1.628446e-06</td>\n",
       "      <td>0.233842</td>\n",
       "      <td>0.662041</td>\n",
       "      <td>0.947261</td>\n",
       "      <td>6.801135e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r6_zip5</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>19.111456</td>\n",
       "      <td>2.730741e-07</td>\n",
       "      <td>0.150856</td>\n",
       "      <td>0.575312</td>\n",
       "      <td>0.863957</td>\n",
       "      <td>5.806521e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r7_zip5</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.921830</td>\n",
       "      <td>7.879657e-07</td>\n",
       "      <td>0.256669</td>\n",
       "      <td>0.604836</td>\n",
       "      <td>0.924016</td>\n",
       "      <td>5.724975e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r8_zip5</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12.608328</td>\n",
       "      <td>6.172566e-06</td>\n",
       "      <td>0.342536</td>\n",
       "      <td>0.660564</td>\n",
       "      <td>0.912586</td>\n",
       "      <td>5.444889e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r9_zip5</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>14.453725</td>\n",
       "      <td>1.102646e-06</td>\n",
       "      <td>0.300452</td>\n",
       "      <td>0.615154</td>\n",
       "      <td>0.862981</td>\n",
       "      <td>5.399058e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r1_zip3</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.046762</td>\n",
       "      <td>1.664473e-06</td>\n",
       "      <td>0.399730</td>\n",
       "      <td>0.851409</td>\n",
       "      <td>1.236888</td>\n",
       "      <td>1.403542e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r2_zip3</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.322288</td>\n",
       "      <td>1.162726e-06</td>\n",
       "      <td>0.329953</td>\n",
       "      <td>0.931593</td>\n",
       "      <td>1.254044</td>\n",
       "      <td>1.954744e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r3_zip3</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9.413737</td>\n",
       "      <td>2.742825e-07</td>\n",
       "      <td>0.290001</td>\n",
       "      <td>0.901103</td>\n",
       "      <td>1.244795</td>\n",
       "      <td>7.789753e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r4_zip3</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>21.489742</td>\n",
       "      <td>7.831931e-07</td>\n",
       "      <td>0.227626</td>\n",
       "      <td>0.642460</td>\n",
       "      <td>0.996713</td>\n",
       "      <td>2.015040e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r5_zip3</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>30.642078</td>\n",
       "      <td>3.080698e-06</td>\n",
       "      <td>0.212303</td>\n",
       "      <td>0.630575</td>\n",
       "      <td>0.859777</td>\n",
       "      <td>1.703548e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r6_zip3</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>35.064914</td>\n",
       "      <td>4.512877e-07</td>\n",
       "      <td>0.133452</td>\n",
       "      <td>0.550169</td>\n",
       "      <td>0.779571</td>\n",
       "      <td>2.136743e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r7_zip3</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>11.570205</td>\n",
       "      <td>3.577603e-07</td>\n",
       "      <td>0.238837</td>\n",
       "      <td>0.519541</td>\n",
       "      <td>0.805497</td>\n",
       "      <td>8.383541e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r8_zip3</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>24.399776</td>\n",
       "      <td>6.796459e-06</td>\n",
       "      <td>0.347527</td>\n",
       "      <td>0.621504</td>\n",
       "      <td>0.826894</td>\n",
       "      <td>1.915440e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r9_zip3</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>25.490778</td>\n",
       "      <td>1.731701e-06</td>\n",
       "      <td>0.308260</td>\n",
       "      <td>0.590722</td>\n",
       "      <td>0.809994</td>\n",
       "      <td>1.413278e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r1_taxclass</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.536321</td>\n",
       "      <td>1.207132e-06</td>\n",
       "      <td>0.360531</td>\n",
       "      <td>0.669592</td>\n",
       "      <td>1.056474</td>\n",
       "      <td>1.621496e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r2_taxclass</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.473254</td>\n",
       "      <td>1.339897e-06</td>\n",
       "      <td>0.447171</td>\n",
       "      <td>0.772891</td>\n",
       "      <td>1.049452</td>\n",
       "      <td>2.079727e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r3_taxclass</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.652882</td>\n",
       "      <td>5.346427e-07</td>\n",
       "      <td>0.425604</td>\n",
       "      <td>0.785873</td>\n",
       "      <td>1.086802</td>\n",
       "      <td>4.520155e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r4_taxclass</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.097711</td>\n",
       "      <td>4.229676e-06</td>\n",
       "      <td>0.293126</td>\n",
       "      <td>0.699112</td>\n",
       "      <td>1.095351</td>\n",
       "      <td>3.210191e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r5_taxclass</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.748965</td>\n",
       "      <td>5.131731e-06</td>\n",
       "      <td>0.261902</td>\n",
       "      <td>0.803634</td>\n",
       "      <td>1.104648</td>\n",
       "      <td>3.568328e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r6_taxclass</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9.577007</td>\n",
       "      <td>3.452161e-07</td>\n",
       "      <td>0.210452</td>\n",
       "      <td>0.794197</td>\n",
       "      <td>1.119727</td>\n",
       "      <td>6.401189e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r7_taxclass</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.736560</td>\n",
       "      <td>1.700666e-06</td>\n",
       "      <td>0.358826</td>\n",
       "      <td>0.719167</td>\n",
       "      <td>1.108424</td>\n",
       "      <td>2.009520e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r8_taxclass</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>6.867700</td>\n",
       "      <td>7.210890e-06</td>\n",
       "      <td>0.393664</td>\n",
       "      <td>0.825520</td>\n",
       "      <td>1.107745</td>\n",
       "      <td>3.366266e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r9_taxclass</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.488781</td>\n",
       "      <td>2.902247e-06</td>\n",
       "      <td>0.370948</td>\n",
       "      <td>0.818441</td>\n",
       "      <td>1.125055</td>\n",
       "      <td>4.416686e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r1_boro</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.036852</td>\n",
       "      <td>1.888492e-06</td>\n",
       "      <td>0.390370</td>\n",
       "      <td>0.828423</td>\n",
       "      <td>1.240560</td>\n",
       "      <td>1.403611e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r2_boro</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.283323</td>\n",
       "      <td>1.230571e-06</td>\n",
       "      <td>0.328445</td>\n",
       "      <td>0.928550</td>\n",
       "      <td>1.257970</td>\n",
       "      <td>2.003714e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r3_boro</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9.630258</td>\n",
       "      <td>2.940213e-07</td>\n",
       "      <td>0.288522</td>\n",
       "      <td>0.891956</td>\n",
       "      <td>1.252535</td>\n",
       "      <td>8.027479e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r4_boro</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>21.462850</td>\n",
       "      <td>7.831931e-07</td>\n",
       "      <td>0.221570</td>\n",
       "      <td>0.619701</td>\n",
       "      <td>0.992171</td>\n",
       "      <td>2.015221e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r5_boro</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>30.801443</td>\n",
       "      <td>3.200320e-06</td>\n",
       "      <td>0.215600</td>\n",
       "      <td>0.623637</td>\n",
       "      <td>0.854983</td>\n",
       "      <td>1.703787e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r6_boro</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>36.083639</td>\n",
       "      <td>4.756653e-07</td>\n",
       "      <td>0.132618</td>\n",
       "      <td>0.537049</td>\n",
       "      <td>0.776748</td>\n",
       "      <td>2.252165e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r7_boro</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>11.545963</td>\n",
       "      <td>3.577603e-07</td>\n",
       "      <td>0.233721</td>\n",
       "      <td>0.495639</td>\n",
       "      <td>0.790852</td>\n",
       "      <td>8.385115e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r8_boro</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>23.474410</td>\n",
       "      <td>7.027002e-06</td>\n",
       "      <td>0.347072</td>\n",
       "      <td>0.615863</td>\n",
       "      <td>0.828698</td>\n",
       "      <td>1.766853e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>r9_boro</th>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>25.451287</td>\n",
       "      <td>1.813324e-06</td>\n",
       "      <td>0.310540</td>\n",
       "      <td>0.578929</td>\n",
       "      <td>0.813968</td>\n",
       "      <td>1.479892e+04</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 count        mean          std           min         25%  \\\n",
       "r1           1070994.0  211.587048   667.298827  3.180786e-04   70.924572   \n",
       "r2           1070994.0  542.508933  2328.098157  7.068200e-04  170.538697   \n",
       "r3           1070994.0  249.084360  1491.143666  8.607173e-05   68.800879   \n",
       "r4           1070994.0   11.034654   178.761499  8.333333e-06    2.230459   \n",
       "r5           1070994.0   28.673038   979.313585  2.008340e-04    5.606622   \n",
       "r6           1070994.0   13.976310   643.995038  1.038033e-05    1.736443   \n",
       "r7           1070994.0   27.211257   268.821110  8.333333e-06    5.128400   \n",
       "r8           1070994.0   56.466939  1285.734106  3.062474e-04   16.717333   \n",
       "r9           1070994.0   23.062487   705.017745  6.049251e-05    6.570424   \n",
       "r1_zip5      1070994.0    1.000000     2.845260  1.866140e-06    0.422482   \n",
       "r2_zip5      1070994.0    1.000000     4.241998  1.238228e-06    0.362310   \n",
       "r3_zip5      1070994.0    1.000000     6.370306  3.619745e-07    0.324294   \n",
       "r4_zip5      1070994.0    1.000000    10.881349  1.541970e-06    0.229912   \n",
       "r5_zip5      1070994.0    1.000000    16.570998  1.628446e-06    0.233842   \n",
       "r6_zip5      1070994.0    1.000000    19.111456  2.730741e-07    0.150856   \n",
       "r7_zip5      1070994.0    1.000000     8.921830  7.879657e-07    0.256669   \n",
       "r8_zip5      1070994.0    1.000000    12.608328  6.172566e-06    0.342536   \n",
       "r9_zip5      1070994.0    1.000000    14.453725  1.102646e-06    0.300452   \n",
       "r1_zip3      1070994.0    1.000000     3.046762  1.664473e-06    0.399730   \n",
       "r2_zip3      1070994.0    1.000000     4.322288  1.162726e-06    0.329953   \n",
       "r3_zip3      1070994.0    1.000000     9.413737  2.742825e-07    0.290001   \n",
       "r4_zip3      1070994.0    1.000000    21.489742  7.831931e-07    0.227626   \n",
       "r5_zip3      1070994.0    1.000000    30.642078  3.080698e-06    0.212303   \n",
       "r6_zip3      1070994.0    1.000000    35.064914  4.512877e-07    0.133452   \n",
       "r7_zip3      1070994.0    1.000000    11.570205  3.577603e-07    0.238837   \n",
       "r8_zip3      1070994.0    1.000000    24.399776  6.796459e-06    0.347527   \n",
       "r9_zip3      1070994.0    1.000000    25.490778  1.731701e-06    0.308260   \n",
       "r1_taxclass  1070994.0    1.000000     3.536321  1.207132e-06    0.360531   \n",
       "r2_taxclass  1070994.0    1.000000     5.473254  1.339897e-06    0.447171   \n",
       "r3_taxclass  1070994.0    1.000000     6.652882  5.346427e-07    0.425604   \n",
       "r4_taxclass  1070994.0    1.000000     5.097711  4.229676e-06    0.293126   \n",
       "r5_taxclass  1070994.0    1.000000     8.748965  5.131731e-06    0.261902   \n",
       "r6_taxclass  1070994.0    1.000000     9.577007  3.452161e-07    0.210452   \n",
       "r7_taxclass  1070994.0    1.000000     3.736560  1.700666e-06    0.358826   \n",
       "r8_taxclass  1070994.0    1.000000     6.867700  7.210890e-06    0.393664   \n",
       "r9_taxclass  1070994.0    1.000000     7.488781  2.902247e-06    0.370948   \n",
       "r1_boro      1070994.0    1.000000     3.036852  1.888492e-06    0.390370   \n",
       "r2_boro      1070994.0    1.000000     4.283323  1.230571e-06    0.328445   \n",
       "r3_boro      1070994.0    1.000000     9.630258  2.940213e-07    0.288522   \n",
       "r4_boro      1070994.0    1.000000    21.462850  7.831931e-07    0.221570   \n",
       "r5_boro      1070994.0    1.000000    30.801443  3.200320e-06    0.215600   \n",
       "r6_boro      1070994.0    1.000000    36.083639  4.756653e-07    0.132618   \n",
       "r7_boro      1070994.0    1.000000    11.545963  3.577603e-07    0.233721   \n",
       "r8_boro      1070994.0    1.000000    23.474410  7.027002e-06    0.347072   \n",
       "r9_boro      1070994.0    1.000000    25.451287  1.813324e-06    0.310540   \n",
       "\n",
       "                    50%         75%           max  \n",
       "r1           150.384615  241.000000  3.423792e+05  \n",
       "r2           493.333333  680.341880  1.097094e+06  \n",
       "r3           234.895833  333.064516  1.097094e+06  \n",
       "r4             4.556098    7.222129  1.540706e+05  \n",
       "r5            14.878788   20.293030  4.914844e+05  \n",
       "r6             7.083124   10.033206  4.914844e+05  \n",
       "r7             8.485584   13.492500  1.540706e+05  \n",
       "r8            26.814732   36.015873  8.249136e+05  \n",
       "r9            12.588911   17.567593  4.936922e+05  \n",
       "r1_zip5        0.904280    1.224272  1.448251e+03  \n",
       "r2_zip5        0.935539    1.240450  2.312079e+03  \n",
       "r3_zip5        0.899052    1.212725  4.446210e+03  \n",
       "r4_zip5        0.702635    1.043997  7.922573e+03  \n",
       "r5_zip5        0.662041    0.947261  6.801135e+03  \n",
       "r6_zip5        0.575312    0.863957  5.806521e+03  \n",
       "r7_zip5        0.604836    0.924016  5.724975e+03  \n",
       "r8_zip5        0.660564    0.912586  5.444889e+03  \n",
       "r9_zip5        0.615154    0.862981  5.399058e+03  \n",
       "r1_zip3        0.851409    1.236888  1.403542e+03  \n",
       "r2_zip3        0.931593    1.254044  1.954744e+03  \n",
       "r3_zip3        0.901103    1.244795  7.789753e+03  \n",
       "r4_zip3        0.642460    0.996713  2.015040e+04  \n",
       "r5_zip3        0.630575    0.859777  1.703548e+04  \n",
       "r6_zip3        0.550169    0.779571  2.136743e+04  \n",
       "r7_zip3        0.519541    0.805497  8.383541e+03  \n",
       "r8_zip3        0.621504    0.826894  1.915440e+04  \n",
       "r9_zip3        0.590722    0.809994  1.413278e+04  \n",
       "r1_taxclass    0.669592    1.056474  1.621496e+03  \n",
       "r2_taxclass    0.772891    1.049452  2.079727e+03  \n",
       "r3_taxclass    0.785873    1.086802  4.520155e+03  \n",
       "r4_taxclass    0.699112    1.095351  3.210191e+03  \n",
       "r5_taxclass    0.803634    1.104648  3.568328e+03  \n",
       "r6_taxclass    0.794197    1.119727  6.401189e+03  \n",
       "r7_taxclass    0.719167    1.108424  2.009520e+03  \n",
       "r8_taxclass    0.825520    1.107745  3.366266e+03  \n",
       "r9_taxclass    0.818441    1.125055  4.416686e+03  \n",
       "r1_boro        0.828423    1.240560  1.403611e+03  \n",
       "r2_boro        0.928550    1.257970  2.003714e+03  \n",
       "r3_boro        0.891956    1.252535  8.027479e+03  \n",
       "r4_boro        0.619701    0.992171  2.015221e+04  \n",
       "r5_boro        0.623637    0.854983  1.703787e+04  \n",
       "r6_boro        0.537049    0.776748  2.252165e+04  \n",
       "r7_boro        0.495639    0.790852  8.385115e+03  \n",
       "r8_boro        0.615863    0.828698  1.766853e+04  \n",
       "r9_boro        0.578929    0.813968  1.479892e+04  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats = variables.describe().transpose()\n",
    "stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#stats.to_csv('stats_on_vars.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part II -- Fraud Score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = variables.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Z-Scale**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = (data - data.mean()) / data.std()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**PCA**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0, 1)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "pca = PCA(n_components = .99, svd_solver = 'full')\n",
    "pca.fit(data)\n",
    "plt.plot(np.cumsum(pca.explained_variance_ratio_))\n",
    "plt.xlabel('Number of components')\n",
    "plt.ylabel('Cumulative explained variance')\n",
    "plt.yticks(np.arange(0.05, 1.1, step=.1))\n",
    "plt.xticks(np.arange(0, 20, step=2))\n",
    "plt.axvline(x=8, linestyle='--')\n",
    "plt.ylim(0,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1070994, 8)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca = PCA(n_components = 8)\n",
    "princ_comps = pca.fit_transform(data)\n",
    "data_pca = pd.DataFrame(princ_comps, columns = ['PC' + str(i) for i in range(1, pca.n_components_+1)])\n",
    "data_pca.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.53169854 0.78121611 0.84502019 0.8854793  0.91587336 0.9373666\n",
      " 0.95148805 0.96451998]\n"
     ]
    }
   ],
   "source": [
    "print(np.cumsum(pca.explained_variance_ratio_))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Z-scale the PCs again**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "      <th>PC5</th>\n",
       "      <th>PC6</th>\n",
       "      <th>PC7</th>\n",
       "      <th>PC8</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.070994e+06</td>\n",
       "      <td>1.070994e+06</td>\n",
       "      <td>1.070994e+06</td>\n",
       "      <td>1.070994e+06</td>\n",
       "      <td>1.070994e+06</td>\n",
       "      <td>1.070994e+06</td>\n",
       "      <td>1.070994e+06</td>\n",
       "      <td>1.070994e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.775030e-16</td>\n",
       "      <td>-1.541870e-16</td>\n",
       "      <td>1.036125e-18</td>\n",
       "      <td>1.915896e-15</td>\n",
       "      <td>3.286538e-15</td>\n",
       "      <td>-6.819767e-16</td>\n",
       "      <td>-4.282080e-17</td>\n",
       "      <td>-3.098741e-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.473123e-01</td>\n",
       "      <td>-3.121770e+02</td>\n",
       "      <td>-4.693497e+02</td>\n",
       "      <td>-1.839580e+02</td>\n",
       "      <td>-3.911585e+02</td>\n",
       "      <td>-2.618056e+02</td>\n",
       "      <td>-2.129463e+02</td>\n",
       "      <td>-2.261002e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-6.862403e-02</td>\n",
       "      <td>-9.947863e-02</td>\n",
       "      <td>-6.131602e-02</td>\n",
       "      <td>-1.448078e-01</td>\n",
       "      <td>-1.114987e-01</td>\n",
       "      <td>-7.018094e-02</td>\n",
       "      <td>-1.119994e-01</td>\n",
       "      <td>-5.556576e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-1.944495e-02</td>\n",
       "      <td>-4.105365e-02</td>\n",
       "      <td>1.099320e-02</td>\n",
       "      <td>-2.396821e-02</td>\n",
       "      <td>-5.630883e-02</td>\n",
       "      <td>7.531287e-04</td>\n",
       "      <td>4.433283e-03</td>\n",
       "      <td>1.525847e-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.192503e-02</td>\n",
       "      <td>2.033200e-02</td>\n",
       "      <td>1.500593e-01</td>\n",
       "      <td>5.505628e-02</td>\n",
       "      <td>3.222937e-02</td>\n",
       "      <td>1.235222e-01</td>\n",
       "      <td>8.384274e-02</td>\n",
       "      <td>1.295477e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.229280e+02</td>\n",
       "      <td>6.036698e+02</td>\n",
       "      <td>6.141779e+02</td>\n",
       "      <td>3.898520e+02</td>\n",
       "      <td>4.478940e+02</td>\n",
       "      <td>4.230685e+02</td>\n",
       "      <td>3.327258e+02</td>\n",
       "      <td>3.030406e+02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                PC1           PC2           PC3           PC4           PC5  \\\n",
       "count  1.070994e+06  1.070994e+06  1.070994e+06  1.070994e+06  1.070994e+06   \n",
       "mean   2.775030e-16 -1.541870e-16  1.036125e-18  1.915896e-15  3.286538e-15   \n",
       "std    1.000000e+00  1.000000e+00  1.000000e+00  1.000000e+00  1.000000e+00   \n",
       "min   -1.473123e-01 -3.121770e+02 -4.693497e+02 -1.839580e+02 -3.911585e+02   \n",
       "25%   -6.862403e-02 -9.947863e-02 -6.131602e-02 -1.448078e-01 -1.114987e-01   \n",
       "50%   -1.944495e-02 -4.105365e-02  1.099320e-02 -2.396821e-02 -5.630883e-02   \n",
       "75%    1.192503e-02  2.033200e-02  1.500593e-01  5.505628e-02  3.222937e-02   \n",
       "max    5.229280e+02  6.036698e+02  6.141779e+02  3.898520e+02  4.478940e+02   \n",
       "\n",
       "                PC6           PC7           PC8  \n",
       "count  1.070994e+06  1.070994e+06  1.070994e+06  \n",
       "mean  -6.819767e-16 -4.282080e-17 -3.098741e-15  \n",
       "std    1.000000e+00  1.000000e+00  1.000000e+00  \n",
       "min   -2.618056e+02 -2.129463e+02 -2.261002e+02  \n",
       "25%   -7.018094e-02 -1.119994e-01 -5.556576e-02  \n",
       "50%    7.531287e-04  4.433283e-03  1.525847e-02  \n",
       "75%    1.235222e-01  8.384274e-02  1.295477e-01  \n",
       "max    4.230685e+02  3.327258e+02  3.030406e+02  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_mean = data_pca.mean()\n",
    "pca_sd = data_pca.std()\n",
    "data_pca = (data_pca - pca_mean) / pca_sd\n",
    "data_pca.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Model 1: Z-score outliers**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "p=1\n",
    "one_over_p = 1/p\n",
    "score1 = (((data_pca).abs()**p).sum(axis=1))**one_over_p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.1, 2120600.5181651576)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(score1, bins=100, range=(0,1000))\n",
    "plt.yscale('log')\n",
    "plt.ylim(ymin=0.1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Model 2: autoencoder error**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/6\n",
      "33469/33469 [==============================] - 37s 1ms/step - loss: 0.9286 - val_loss: 0.9219\n",
      "Epoch 2/6\n",
      "33469/33469 [==============================] - 35s 1ms/step - loss: 0.9214 - val_loss: 0.9204\n",
      "Epoch 3/6\n",
      "33469/33469 [==============================] - 38s 1ms/step - loss: 0.9206 - val_loss: 0.9201\n",
      "Epoch 4/6\n",
      "33469/33469 [==============================] - 36s 1ms/step - loss: 0.9200 - val_loss: 0.9204\n",
      "Epoch 5/6\n",
      "33469/33469 [==============================] - 34s 1ms/step - loss: 0.9204 - val_loss: 0.9195\n",
      "Epoch 6/6\n",
      "33469/33469 [==============================] - 33s 999us/step - loss: 0.9200 - val_loss: 0.9201\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7fc4c89bea10>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from keras.models import Model\n",
    "from keras.layers import Input, Dense\n",
    "\n",
    "# placeholder for input\n",
    "data_in = Input(shape=(8,))\n",
    "# dimension of the encoded data. Choose 3\n",
    "encoded_dim = 4\n",
    "# encoded representation of the data\n",
    "encoded = Dense(encoded_dim, activation='tanh')(data_in)\n",
    "# reconstruction of the input\n",
    "decoded = Dense(8,activation='tanh')(encoded)\n",
    "# this model maps the input data to the reconstructed data\n",
    "autoencoder = Model(data_in, decoded)\n",
    "\n",
    "autoencoder.compile(optimizer='adam', loss='mean_squared_error')\n",
    "\n",
    "autoencoder.fit(data_pca,data_pca, epochs=6, shuffle=True, validation_data=(data_pca,data_pca))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca_out = autoencoder.predict(data_pca)\n",
    "error = pca_out - data_pca\n",
    "p=3\n",
    "oop=1/p\n",
    "score2 = ((error.abs()**p).sum(axis=1))**oop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.1, 2141925.591749878)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(score2, bins=100, range=(0,1000))\n",
    "plt.yscale('log')\n",
    "plt.ylim(ymin=0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "scores = pd.DataFrame(score1)\n",
    "scores.columns=['score1']\n",
    "scores['score2'] = score2\n",
    "scores['score1 rank'] = scores['score1'].rank()\n",
    "scores['score2 rank'] = scores['score2'].rank()\n",
    "scores['final'] = (scores['score1 rank'] + scores['score2 rank'])/2\n",
    "top_records = scores.sort_values(['final'], ascending = False).head(100).index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc4c916a610>"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.distplot(scores['final'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_origi = df.iloc[:,:32]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "report = data_origi.loc[top_records]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "report['score1 rank'] = scores['score1 rank'].loc[top_records]\n",
    "report['score2 rank'] = scores['score2 rank'].loc[top_records]\n",
    "report['final'] = scores['final'].loc[top_records]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RECORD</th>\n",
       "      <th>BBLE</th>\n",
       "      <th>B</th>\n",
       "      <th>BLOCK</th>\n",
       "      <th>LOT</th>\n",
       "      <th>EASEMENT</th>\n",
       "      <th>OWNER</th>\n",
       "      <th>BLDGCL</th>\n",
       "      <th>TAXCLASS</th>\n",
       "      <th>LTFRONT</th>\n",
       "      <th>...</th>\n",
       "      <th>AVTOT2</th>\n",
       "      <th>EXLAND2</th>\n",
       "      <th>EXTOT2</th>\n",
       "      <th>EXCD2</th>\n",
       "      <th>PERIOD</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>VALTYPE</th>\n",
       "      <th>score1 rank</th>\n",
       "      <th>score2 rank</th>\n",
       "      <th>final</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>917941</th>\n",
       "      <td>917942</td>\n",
       "      <td>4142600001</td>\n",
       "      <td>4</td>\n",
       "      <td>14260</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LOGAN PROPERTY, INC.</td>\n",
       "      <td>T1</td>\n",
       "      <td>4</td>\n",
       "      <td>4910.0</td>\n",
       "      <td>...</td>\n",
       "      <td>4.501180e+09</td>\n",
       "      <td>1.644454e+09</td>\n",
       "      <td>4.501180e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FINAL</td>\n",
       "      <td>2010/11</td>\n",
       "      <td>AC-TR</td>\n",
       "      <td>1070993.0</td>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1070993.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>565391</th>\n",
       "      <td>565392</td>\n",
       "      <td>3085900700</td>\n",
       "      <td>3</td>\n",
       "      <td>8590</td>\n",
       "      <td>700</td>\n",
       "      <td>NaN</td>\n",
       "      <td>U S GOVERNMENT OWNRD</td>\n",
       "      <td>V9</td>\n",
       "      <td>4</td>\n",
       "      <td>117.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8.484847e+08</td>\n",
       "      <td>8.484847e+08</td>\n",
       "      <td>8.484847e+08</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FINAL</td>\n",
       "      <td>2010/11</td>\n",
       "      <td>AC-TR</td>\n",
       "      <td>1070994.0</td>\n",
       "      <td>1070993.0</td>\n",
       "      <td>1070993.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85885</th>\n",
       "      <td>85886</td>\n",
       "      <td>1012540010</td>\n",
       "      <td>1</td>\n",
       "      <td>1254</td>\n",
       "      <td>10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PARKS AND RECREATION</td>\n",
       "      <td>Q1</td>\n",
       "      <td>4</td>\n",
       "      <td>4000.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.826018e+07</td>\n",
       "      <td>2.813400e+07</td>\n",
       "      <td>2.826018e+07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FINAL</td>\n",
       "      <td>2010/11</td>\n",
       "      <td>AC-TR</td>\n",
       "      <td>1070992.0</td>\n",
       "      <td>1070992.0</td>\n",
       "      <td>1070992.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>684703</th>\n",
       "      <td>684704</td>\n",
       "      <td>4036590105</td>\n",
       "      <td>4</td>\n",
       "      <td>3659</td>\n",
       "      <td>105</td>\n",
       "      <td>NaN</td>\n",
       "      <td>W RUFERT</td>\n",
       "      <td>V0</td>\n",
       "      <td>1B</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FINAL</td>\n",
       "      <td>2010/11</td>\n",
       "      <td>AC-TR</td>\n",
       "      <td>1070991.0</td>\n",
       "      <td>1070991.0</td>\n",
       "      <td>1070991.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67128</th>\n",
       "      <td>67129</td>\n",
       "      <td>1011110001</td>\n",
       "      <td>1</td>\n",
       "      <td>1111</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CULTURAL AFFAIRS</td>\n",
       "      <td>Q1</td>\n",
       "      <td>4</td>\n",
       "      <td>840.0</td>\n",
       "      <td>...</td>\n",
       "      <td>2.465055e+09</td>\n",
       "      <td>2.371005e+09</td>\n",
       "      <td>2.465055e+09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FINAL</td>\n",
       "      <td>2010/11</td>\n",
       "      <td>AC-TR</td>\n",
       "      <td>1070990.0</td>\n",
       "      <td>1070990.0</td>\n",
       "      <td>1070990.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 35 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        RECORD        BBLE  B  BLOCK  LOT EASEMENT                 OWNER  \\\n",
       "917941  917942  4142600001  4  14260    1      NaN  LOGAN PROPERTY, INC.   \n",
       "565391  565392  3085900700  3   8590  700      NaN  U S GOVERNMENT OWNRD   \n",
       "85885    85886  1012540010  1   1254   10      NaN  PARKS AND RECREATION   \n",
       "684703  684704  4036590105  4   3659  105      NaN              W RUFERT   \n",
       "67128    67129  1011110001  1   1111    1      NaN      CULTURAL AFFAIRS   \n",
       "\n",
       "       BLDGCL TAXCLASS  LTFRONT  ...        AVTOT2       EXLAND2  \\\n",
       "917941     T1        4   4910.0  ...  4.501180e+09  1.644454e+09   \n",
       "565391     V9        4    117.0  ...  8.484847e+08  8.484847e+08   \n",
       "85885      Q1        4   4000.0  ...  2.826018e+07  2.813400e+07   \n",
       "684703     V0       1B      2.0  ...           NaN           NaN   \n",
       "67128      Q1        4    840.0  ...  2.465055e+09  2.371005e+09   \n",
       "\n",
       "              EXTOT2  EXCD2  PERIOD     YEAR  VALTYPE  score1 rank  \\\n",
       "917941  4.501180e+09    NaN   FINAL  2010/11    AC-TR    1070993.0   \n",
       "565391  8.484847e+08    NaN   FINAL  2010/11    AC-TR    1070994.0   \n",
       "85885   2.826018e+07    NaN   FINAL  2010/11    AC-TR    1070992.0   \n",
       "684703           NaN    NaN   FINAL  2010/11    AC-TR    1070991.0   \n",
       "67128   2.465055e+09    NaN   FINAL  2010/11    AC-TR    1070990.0   \n",
       "\n",
       "        score2 rank      final  \n",
       "917941    1070994.0  1070993.5  \n",
       "565391    1070993.0  1070993.5  \n",
       "85885     1070992.0  1070992.0  \n",
       "684703    1070991.0  1070991.0  \n",
       "67128     1070990.0  1070990.0  \n",
       "\n",
       "[5 rows x 35 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "#report.to_csv('Part1_100.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "Part1 = [ 917941,  565391,   85885,   67128,  684703,  690832,  915468,\n",
    "              44247,  565397,   39769, 1059882,  116646,  556608,  501142,\n",
    "                418,   33750,  918203,  738017,  957063, 1065869,  139725,\n",
    "             964933,  252833,  927226,   48220,  918857,   19241,  106680,\n",
    "             151043,  104410,  932860,  915469,  684562,  964947,  610681,\n",
    "             330290,  771149,  985596,  245572,  752487,   60468,  691878,\n",
    "             649674,   97083,  973911,  109066,  923882,  556910,  153069,\n",
    "             665157,  773561,   85883,   56135,  918204,  764311,  131602,\n",
    "             209713,   86945,  621688,  209711,  216947,  934792,  817348,\n",
    "             918304,   47983,  464854,  720599,  991516,   26242,  177645,\n",
    "             174538,  248664,   12075,  994818,  994816,  994814,  994812,\n",
    "             243058,  334956,   79816,  994820,  398277,  992070,  638992,\n",
    "             773734,  991782,  918919,  934749,   88388,    7053,  330291,\n",
    "              93878,  340899,  134442,   85961,  917059,  116645,  155892,\n",
    "             170441,  665156]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "report.to_csv('Part2_100.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "Part2 = [ 917941,  565391,   85885,  684703,   67128,  915468,  690832,\n",
    "            1059882,   44247,  116646,   39769,  501142,  106680,  565397,\n",
    "             556608,  957063,     418,  252833,   33750, 1065869,  738017,\n",
    "             964933,  151043,  918203,  918857,   48220,  927226,  139725,\n",
    "             985596,   19241,  915469,  932860,  104410,  752487,  771149,\n",
    "             684562,  330290,  610681,  964947,  691878,  720599,  245572,\n",
    "              60468,  934792,   97083,  649674,  973911,  665157,  131602,\n",
    "             153069,  464854,  216947,   85883,  340899,  177645,  556910,\n",
    "              56135,  773561,  918304,   86945,   47983,  248664,  991516,\n",
    "             764311,  817348,  109066,  621688,  638992,  917059,  923882,\n",
    "             994812,  994814,  994816,  994818,  451671,  918204,  209711,\n",
    "             994820,  992070,  243058,   12075,  209713,  991782,  334956,\n",
    "             174538,  398277,  116645,  330291,  259234,  918919,   26242,\n",
    "              64270,  773734,   88388,  934749,   79816,   33563,    6093,\n",
    "              56133,       1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.93"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(100 - len(list(set(Part1) - set(Part2))))/100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "top15 = scores.sort_values(['final'], ascending = False).head(15).index\n",
    "data_zs_top = data.loc[top15]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>r1</th>\n",
       "      <th>r2</th>\n",
       "      <th>r3</th>\n",
       "      <th>r4</th>\n",
       "      <th>r5</th>\n",
       "      <th>r6</th>\n",
       "      <th>r7</th>\n",
       "      <th>r8</th>\n",
       "      <th>r9</th>\n",
       "      <th>r1_zip5</th>\n",
       "      <th>...</th>\n",
       "      <th>r9_taxclass</th>\n",
       "      <th>r1_boro</th>\n",
       "      <th>r2_boro</th>\n",
       "      <th>r3_boro</th>\n",
       "      <th>r4_boro</th>\n",
       "      <th>r5_boro</th>\n",
       "      <th>r6_boro</th>\n",
       "      <th>r7_boro</th>\n",
       "      <th>r8_boro</th>\n",
       "      <th>r9_boro</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RECORD</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>917942</th>\n",
       "      <td>0.535636</td>\n",
       "      <td>28.155462</td>\n",
       "      <td>14.607118</td>\n",
       "      <td>15.196011</td>\n",
       "      <td>323.460897</td>\n",
       "      <td>163.953849</td>\n",
       "      <td>26.318384</td>\n",
       "      <td>641.545643</td>\n",
       "      <td>389.987533</td>\n",
       "      <td>1.492310</td>\n",
       "      <td>...</td>\n",
       "      <td>328.352098</td>\n",
       "      <td>0.783165</td>\n",
       "      <td>26.629905</td>\n",
       "      <td>7.710688</td>\n",
       "      <td>19.701153</td>\n",
       "      <td>379.852884</td>\n",
       "      <td>194.948448</td>\n",
       "      <td>45.398373</td>\n",
       "      <td>752.629322</td>\n",
       "      <td>444.211540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>565392</th>\n",
       "      <td>512.765210</td>\n",
       "      <td>328.137810</td>\n",
       "      <td>93.955048</td>\n",
       "      <td>861.816504</td>\n",
       "      <td>351.253292</td>\n",
       "      <td>98.049397</td>\n",
       "      <td>573.033245</td>\n",
       "      <td>267.519796</td>\n",
       "      <td>89.549858</td>\n",
       "      <td>508.653468</td>\n",
       "      <td>...</td>\n",
       "      <td>75.315338</td>\n",
       "      <td>461.863588</td>\n",
       "      <td>304.868676</td>\n",
       "      <td>54.703561</td>\n",
       "      <td>938.887683</td>\n",
       "      <td>553.119217</td>\n",
       "      <td>175.573719</td>\n",
       "      <td>726.151150</td>\n",
       "      <td>354.612509</td>\n",
       "      <td>134.353747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85886</th>\n",
       "      <td>-0.141711</td>\n",
       "      <td>471.007306</td>\n",
       "      <td>735.572763</td>\n",
       "      <td>0.231539</td>\n",
       "      <td>501.836908</td>\n",
       "      <td>763.158673</td>\n",
       "      <td>0.094670</td>\n",
       "      <td>383.932975</td>\n",
       "      <td>700.222268</td>\n",
       "      <td>-0.165887</td>\n",
       "      <td>...</td>\n",
       "      <td>589.640208</td>\n",
       "      <td>-0.220949</td>\n",
       "      <td>467.560770</td>\n",
       "      <td>833.464564</td>\n",
       "      <td>0.025431</td>\n",
       "      <td>254.237338</td>\n",
       "      <td>624.123556</td>\n",
       "      <td>-0.037172</td>\n",
       "      <td>147.129115</td>\n",
       "      <td>581.421285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>684704</th>\n",
       "      <td>209.994955</td>\n",
       "      <td>-0.159183</td>\n",
       "      <td>-0.138220</td>\n",
       "      <td>20.610045</td>\n",
       "      <td>-0.024656</td>\n",
       "      <td>-0.019945</td>\n",
       "      <td>13.647789</td>\n",
       "      <td>-0.040397</td>\n",
       "      <td>-0.031106</td>\n",
       "      <td>224.806257</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000002</td>\n",
       "      <td>274.043849</td>\n",
       "      <td>-0.163587</td>\n",
       "      <td>-0.088594</td>\n",
       "      <td>26.708414</td>\n",
       "      <td>-0.027038</td>\n",
       "      <td>-0.025624</td>\n",
       "      <td>23.584205</td>\n",
       "      <td>-0.038468</td>\n",
       "      <td>-0.037462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67129</th>\n",
       "      <td>81.640121</td>\n",
       "      <td>466.558209</td>\n",
       "      <td>133.630975</td>\n",
       "      <td>132.685538</td>\n",
       "      <td>481.468505</td>\n",
       "      <td>134.402892</td>\n",
       "      <td>91.448412</td>\n",
       "      <td>380.307754</td>\n",
       "      <td>127.312210</td>\n",
       "      <td>33.568954</td>\n",
       "      <td>...</td>\n",
       "      <td>107.119815</td>\n",
       "      <td>50.302149</td>\n",
       "      <td>463.144208</td>\n",
       "      <td>151.484805</td>\n",
       "      <td>32.554357</td>\n",
       "      <td>243.917715</td>\n",
       "      <td>109.908658</td>\n",
       "      <td>23.018041</td>\n",
       "      <td>145.739630</td>\n",
       "      <td>105.702266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>915469</th>\n",
       "      <td>0.493989</td>\n",
       "      <td>70.819634</td>\n",
       "      <td>27.566296</td>\n",
       "      <td>0.119930</td>\n",
       "      <td>10.105426</td>\n",
       "      <td>3.831221</td>\n",
       "      <td>0.019575</td>\n",
       "      <td>7.675449</td>\n",
       "      <td>3.486722</td>\n",
       "      <td>1.217900</td>\n",
       "      <td>...</td>\n",
       "      <td>292.582394</td>\n",
       "      <td>0.728833</td>\n",
       "      <td>67.002021</td>\n",
       "      <td>14.565213</td>\n",
       "      <td>0.188524</td>\n",
       "      <td>11.869057</td>\n",
       "      <td>4.553629</td>\n",
       "      <td>0.121363</td>\n",
       "      <td>9.013270</td>\n",
       "      <td>3.969505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>690833</th>\n",
       "      <td>0.796250</td>\n",
       "      <td>259.635741</td>\n",
       "      <td>135.075906</td>\n",
       "      <td>1.715713</td>\n",
       "      <td>264.186396</td>\n",
       "      <td>133.907901</td>\n",
       "      <td>1.142412</td>\n",
       "      <td>211.702818</td>\n",
       "      <td>128.687452</td>\n",
       "      <td>0.840457</td>\n",
       "      <td>...</td>\n",
       "      <td>108.278081</td>\n",
       "      <td>1.123162</td>\n",
       "      <td>245.674325</td>\n",
       "      <td>71.430493</td>\n",
       "      <td>2.253910</td>\n",
       "      <td>310.244852</td>\n",
       "      <td>159.222125</td>\n",
       "      <td>2.054480</td>\n",
       "      <td>248.365155</td>\n",
       "      <td>146.578842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1059883</th>\n",
       "      <td>192.216004</td>\n",
       "      <td>0.010762</td>\n",
       "      <td>-0.097165</td>\n",
       "      <td>134.407816</td>\n",
       "      <td>0.079155</td>\n",
       "      <td>0.008570</td>\n",
       "      <td>221.414912</td>\n",
       "      <td>0.160682</td>\n",
       "      <td>0.035790</td>\n",
       "      <td>315.781349</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.075839</td>\n",
       "      <td>273.866642</td>\n",
       "      <td>0.049725</td>\n",
       "      <td>-0.061525</td>\n",
       "      <td>105.212749</td>\n",
       "      <td>0.124000</td>\n",
       "      <td>0.014795</td>\n",
       "      <td>221.330917</td>\n",
       "      <td>0.276188</td>\n",
       "      <td>0.055836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44248</th>\n",
       "      <td>0.549015</td>\n",
       "      <td>192.655103</td>\n",
       "      <td>300.986032</td>\n",
       "      <td>1.323284</td>\n",
       "      <td>196.409332</td>\n",
       "      <td>298.699543</td>\n",
       "      <td>0.866240</td>\n",
       "      <td>157.125534</td>\n",
       "      <td>286.595712</td>\n",
       "      <td>0.231394</td>\n",
       "      <td>...</td>\n",
       "      <td>241.272701</td>\n",
       "      <td>0.205767</td>\n",
       "      <td>191.244109</td>\n",
       "      <td>341.092445</td>\n",
       "      <td>0.293548</td>\n",
       "      <td>99.492882</td>\n",
       "      <td>244.275273</td>\n",
       "      <td>0.157551</td>\n",
       "      <td>60.197738</td>\n",
       "      <td>237.964198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>116647</th>\n",
       "      <td>128.360902</td>\n",
       "      <td>1.933488</td>\n",
       "      <td>-0.070398</td>\n",
       "      <td>57.266052</td>\n",
       "      <td>0.585411</td>\n",
       "      <td>0.005005</td>\n",
       "      <td>143.637487</td>\n",
       "      <td>1.721406</td>\n",
       "      <td>0.059271</td>\n",
       "      <td>84.637968</td>\n",
       "      <td>...</td>\n",
       "      <td>0.947362</td>\n",
       "      <td>79.165266</td>\n",
       "      <td>1.917208</td>\n",
       "      <td>0.005655</td>\n",
       "      <td>14.032342</td>\n",
       "      <td>0.278966</td>\n",
       "      <td>-0.005872</td>\n",
       "      <td>36.189151</td>\n",
       "      <td>0.634019</td>\n",
       "      <td>0.037088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39770</th>\n",
       "      <td>1.762581</td>\n",
       "      <td>68.224138</td>\n",
       "      <td>8.054577</td>\n",
       "      <td>1.263718</td>\n",
       "      <td>27.756446</td>\n",
       "      <td>3.228554</td>\n",
       "      <td>2.221844</td>\n",
       "      <td>55.736472</td>\n",
       "      <td>7.792378</td>\n",
       "      <td>0.764409</td>\n",
       "      <td>...</td>\n",
       "      <td>91.819347</td>\n",
       "      <td>0.955482</td>\n",
       "      <td>67.723086</td>\n",
       "      <td>9.210978</td>\n",
       "      <td>0.278920</td>\n",
       "      <td>14.045133</td>\n",
       "      <td>2.630442</td>\n",
       "      <td>0.499669</td>\n",
       "      <td>21.337061</td>\n",
       "      <td>6.458315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>501143</th>\n",
       "      <td>0.060578</td>\n",
       "      <td>88.251215</td>\n",
       "      <td>137.981953</td>\n",
       "      <td>0.555726</td>\n",
       "      <td>92.101578</td>\n",
       "      <td>140.080309</td>\n",
       "      <td>0.320636</td>\n",
       "      <td>72.054970</td>\n",
       "      <td>131.453340</td>\n",
       "      <td>0.037669</td>\n",
       "      <td>...</td>\n",
       "      <td>110.607587</td>\n",
       "      <td>0.010912</td>\n",
       "      <td>81.980693</td>\n",
       "      <td>80.340478</td>\n",
       "      <td>0.626066</td>\n",
       "      <td>145.042590</td>\n",
       "      <td>250.832265</td>\n",
       "      <td>0.447943</td>\n",
       "      <td>95.524317</td>\n",
       "      <td>197.217944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106681</th>\n",
       "      <td>68.018122</td>\n",
       "      <td>19.353776</td>\n",
       "      <td>0.527970</td>\n",
       "      <td>75.457889</td>\n",
       "      <td>13.755887</td>\n",
       "      <td>0.454727</td>\n",
       "      <td>76.232066</td>\n",
       "      <td>15.915836</td>\n",
       "      <td>0.628780</td>\n",
       "      <td>36.695007</td>\n",
       "      <td>...</td>\n",
       "      <td>7.639682</td>\n",
       "      <td>41.886764</td>\n",
       "      <td>19.210105</td>\n",
       "      <td>0.683586</td>\n",
       "      <td>18.500014</td>\n",
       "      <td>6.951769</td>\n",
       "      <td>0.361925</td>\n",
       "      <td>19.177847</td>\n",
       "      <td>6.074499</td>\n",
       "      <td>0.509983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>565398</th>\n",
       "      <td>7.048056</td>\n",
       "      <td>175.165427</td>\n",
       "      <td>50.108035</td>\n",
       "      <td>12.310264</td>\n",
       "      <td>187.607419</td>\n",
       "      <td>52.362728</td>\n",
       "      <td>8.125941</td>\n",
       "      <td>142.874565</td>\n",
       "      <td>47.817592</td>\n",
       "      <td>6.955144</td>\n",
       "      <td>...</td>\n",
       "      <td>40.167291</td>\n",
       "      <td>6.305346</td>\n",
       "      <td>162.736074</td>\n",
       "      <td>29.171395</td>\n",
       "      <td>13.431515</td>\n",
       "      <td>295.432109</td>\n",
       "      <td>93.769349</td>\n",
       "      <td>10.338305</td>\n",
       "      <td>189.395531</td>\n",
       "      <td>71.746411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>556609</th>\n",
       "      <td>116.143916</td>\n",
       "      <td>10.473861</td>\n",
       "      <td>16.549446</td>\n",
       "      <td>194.131574</td>\n",
       "      <td>11.340451</td>\n",
       "      <td>17.268075</td>\n",
       "      <td>129.990600</td>\n",
       "      <td>8.680288</td>\n",
       "      <td>15.877538</td>\n",
       "      <td>145.777924</td>\n",
       "      <td>...</td>\n",
       "      <td>13.266511</td>\n",
       "      <td>104.580672</td>\n",
       "      <td>9.714723</td>\n",
       "      <td>9.630191</td>\n",
       "      <td>211.508521</td>\n",
       "      <td>17.871027</td>\n",
       "      <td>30.930537</td>\n",
       "      <td>164.757069</td>\n",
       "      <td>11.521316</td>\n",
       "      <td>23.829492</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>15 rows Ã— 45 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 r1          r2          r3          r4          r5  \\\n",
       "RECORD                                                                \n",
       "917942     0.535636   28.155462   14.607118   15.196011  323.460897   \n",
       "565392   512.765210  328.137810   93.955048  861.816504  351.253292   \n",
       "85886     -0.141711  471.007306  735.572763    0.231539  501.836908   \n",
       "684704   209.994955   -0.159183   -0.138220   20.610045   -0.024656   \n",
       "67129     81.640121  466.558209  133.630975  132.685538  481.468505   \n",
       "915469     0.493989   70.819634   27.566296    0.119930   10.105426   \n",
       "690833     0.796250  259.635741  135.075906    1.715713  264.186396   \n",
       "1059883  192.216004    0.010762   -0.097165  134.407816    0.079155   \n",
       "44248      0.549015  192.655103  300.986032    1.323284  196.409332   \n",
       "116647   128.360902    1.933488   -0.070398   57.266052    0.585411   \n",
       "39770      1.762581   68.224138    8.054577    1.263718   27.756446   \n",
       "501143     0.060578   88.251215  137.981953    0.555726   92.101578   \n",
       "106681    68.018122   19.353776    0.527970   75.457889   13.755887   \n",
       "565398     7.048056  175.165427   50.108035   12.310264  187.607419   \n",
       "556609   116.143916   10.473861   16.549446  194.131574   11.340451   \n",
       "\n",
       "                 r6          r7          r8          r9     r1_zip5  ...  \\\n",
       "RECORD                                                               ...   \n",
       "917942   163.953849   26.318384  641.545643  389.987533    1.492310  ...   \n",
       "565392    98.049397  573.033245  267.519796   89.549858  508.653468  ...   \n",
       "85886    763.158673    0.094670  383.932975  700.222268   -0.165887  ...   \n",
       "684704    -0.019945   13.647789   -0.040397   -0.031106  224.806257  ...   \n",
       "67129    134.402892   91.448412  380.307754  127.312210   33.568954  ...   \n",
       "915469     3.831221    0.019575    7.675449    3.486722    1.217900  ...   \n",
       "690833   133.907901    1.142412  211.702818  128.687452    0.840457  ...   \n",
       "1059883    0.008570  221.414912    0.160682    0.035790  315.781349  ...   \n",
       "44248    298.699543    0.866240  157.125534  286.595712    0.231394  ...   \n",
       "116647     0.005005  143.637487    1.721406    0.059271   84.637968  ...   \n",
       "39770      3.228554    2.221844   55.736472    7.792378    0.764409  ...   \n",
       "501143   140.080309    0.320636   72.054970  131.453340    0.037669  ...   \n",
       "106681     0.454727   76.232066   15.915836    0.628780   36.695007  ...   \n",
       "565398    52.362728    8.125941  142.874565   47.817592    6.955144  ...   \n",
       "556609    17.268075  129.990600    8.680288   15.877538  145.777924  ...   \n",
       "\n",
       "         r9_taxclass     r1_boro     r2_boro     r3_boro     r4_boro  \\\n",
       "RECORD                                                                 \n",
       "917942    328.352098    0.783165   26.629905    7.710688   19.701153   \n",
       "565392     75.315338  461.863588  304.868676   54.703561  938.887683   \n",
       "85886     589.640208   -0.220949  467.560770  833.464564    0.025431   \n",
       "684704     -0.000002  274.043849   -0.163587   -0.088594   26.708414   \n",
       "67129     107.119815   50.302149  463.144208  151.484805   32.554357   \n",
       "915469    292.582394    0.728833   67.002021   14.565213    0.188524   \n",
       "690833    108.278081    1.123162  245.674325   71.430493    2.253910   \n",
       "1059883    -0.075839  273.866642    0.049725   -0.061525  105.212749   \n",
       "44248     241.272701    0.205767  191.244109  341.092445    0.293548   \n",
       "116647      0.947362   79.165266    1.917208    0.005655   14.032342   \n",
       "39770      91.819347    0.955482   67.723086    9.210978    0.278920   \n",
       "501143    110.607587    0.010912   81.980693   80.340478    0.626066   \n",
       "106681      7.639682   41.886764   19.210105    0.683586   18.500014   \n",
       "565398     40.167291    6.305346  162.736074   29.171395   13.431515   \n",
       "556609     13.266511  104.580672    9.714723    9.630191  211.508521   \n",
       "\n",
       "            r5_boro     r6_boro     r7_boro     r8_boro     r9_boro  \n",
       "RECORD                                                               \n",
       "917942   379.852884  194.948448   45.398373  752.629322  444.211540  \n",
       "565392   553.119217  175.573719  726.151150  354.612509  134.353747  \n",
       "85886    254.237338  624.123556   -0.037172  147.129115  581.421285  \n",
       "684704    -0.027038   -0.025624   23.584205   -0.038468   -0.037462  \n",
       "67129    243.917715  109.908658   23.018041  145.739630  105.702266  \n",
       "915469    11.869057    4.553629    0.121363    9.013270    3.969505  \n",
       "690833   310.244852  159.222125    2.054480  248.365155  146.578842  \n",
       "1059883    0.124000    0.014795  221.330917    0.276188    0.055836  \n",
       "44248     99.492882  244.275273    0.157551   60.197738  237.964198  \n",
       "116647     0.278966   -0.005872   36.189151    0.634019    0.037088  \n",
       "39770     14.045133    2.630442    0.499669   21.337061    6.458315  \n",
       "501143   145.042590  250.832265    0.447943   95.524317  197.217944  \n",
       "106681     6.951769    0.361925   19.177847    6.074499    0.509983  \n",
       "565398   295.432109   93.769349   10.338305  189.395531   71.746411  \n",
       "556609    17.871027   30.930537  164.757069   11.521316   23.829492  \n",
       "\n",
       "[15 rows x 45 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_zs_top.index = top15 + 1\n",
    "data_zs_top.index.name = 'RECORD'\n",
    "data_zs_top"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_heatmap = data_zs_top.abs()\n",
    "plt.rcParams['figure.figsize'] = (20,5)\n",
    "ax = sns.heatmap(data_heatmap, center=0, vmin=0, vmax=50, cmap='Reds')\n",
    "ax.xaxis.tick_top()\n",
    "ax.xaxis.set_label_position('top')\n",
    "plt.xticks(rotation=90)\n",
    "plt.savefig('heatmap.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FULLVAL</th>\n",
       "      <th>AVLAND</th>\n",
       "      <th>AVTOT</th>\n",
       "      <th>LTFRONT</th>\n",
       "      <th>LTDEPTH</th>\n",
       "      <th>BLDFRONT</th>\n",
       "      <th>BLDDEPTH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>565397</th>\n",
       "      <td>2.310884e+09</td>\n",
       "      <td>1.039898e+09</td>\n",
       "      <td>1.039898e+09</td>\n",
       "      <td>466</td>\n",
       "      <td>1009</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             FULLVAL        AVLAND         AVTOT  LTFRONT  LTDEPTH  BLDFRONT  \\\n",
       "565397  2.310884e+09  1.039898e+09  1.039898e+09      466     1009         0   \n",
       "\n",
       "        BLDDEPTH  \n",
       "565397         0  "
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orig = pd.read_csv('NY property data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>FULLVAL</th>\n",
       "      <th>AVLAND</th>\n",
       "      <th>AVTOT</th>\n",
       "      <th>LTFRONT</th>\n",
       "      <th>LTDEPTH</th>\n",
       "      <th>BLDFRONT</th>\n",
       "      <th>BLDDEPTH</th>\n",
       "      <th>STORIES</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>39769</th>\n",
       "      <td>10200000.0</td>\n",
       "      <td>1741500.0</td>\n",
       "      <td>4590000.0</td>\n",
       "      <td>75</td>\n",
       "      <td>98</td>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          FULLVAL     AVLAND      AVTOT  LTFRONT  LTDEPTH  BLDFRONT  BLDDEPTH  \\\n",
       "39769  10200000.0  1741500.0  4590000.0       75       98         8         8   \n",
       "\n",
       "       STORIES  \n",
       "39769     13.0  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orig.loc[orig['RECORD']==39770][['FULLVAL','AVLAND','AVTOT','LTFRONT','LTDEPTH','BLDFRONT','BLDDEPTH','STORIES']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
